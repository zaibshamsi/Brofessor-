// IMPORTANT: RUN THIS SCRIPT IN YOUR SUPABASE SQL EDITOR TO CREATE THE 'TIMETABLES' TABLE.
// The error "Could not find the table 'public.timetables'" occurs because this table is missing.
/*
-- This script sets up the 'timetables' table, enables Row Level Security (RLS),
-- and creates policies to control access.

-- 1. Create the 'timetables' table
CREATE TABLE public.timetables (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    department text NOT NULL,
    year text NOT NULL,
    file_name text NOT NULL,
    storage_path text NOT NULL,
    content text,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL
);

-- 2. Add comments to the table and columns for clarity
COMMENT ON TABLE public.timetables IS 'Stores timetable files and their extracted content.';
COMMENT ON COLUMN public.timetables.department IS 'The academic department for the timetable (e.g., CSE, ECE).';
COMMENT ON COLUMN public.timetables.year IS 'The academic year for the timetable (e.g., 1st, 2nd).';
COMMENT ON COLUMN public.timetables.file_name IS 'Original name of the uploaded file.';
COMMENT ON COLUMN public.timetables.storage_path IS 'Path to the file in Supabase Storage.';
COMMENT ON COLUMN public.timetables.content IS 'Text content extracted from the file by Gemini.';
COMMENT ON COLUMN public.timetables.user_id IS 'The ID of the admin user who uploaded the timetable.';

-- 3. Enable Row Level Security (RLS) on the table
-- This is a crucial security step in Supabase.
ALTER TABLE public.timetables ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies to define access rules
-- Policy: Allow all authenticated users to read all timetables.
CREATE POLICY "Allow authenticated users to read timetables"
ON public.timetables
FOR SELECT
TO authenticated
USING (true);

-- Policy: Allow only users with an 'admin' role to insert timetables.
-- This relies on the `get_my_role()` function being present in your database.
CREATE POLICY "Allow admin users to insert timetables"
ON public.timetables
FOR INSERT
TO authenticated
WITH CHECK (public.get_my_role() = 'admin');

-- Policy: Allow only users with an 'admin' role to delete timetables.
CREATE POLICY "Allow admin users to delete timetables"
ON public.timetables
FOR DELETE
TO authenticated
USING (public.get_my_role() = 'admin');

*/

import { supabase } from './supabaseClient';
import { Timetable } from '../types';
import { databaseService } from './databaseService';

const TIMETABLE_TABLE = 'timetables';

type NewTimetable = Omit<Timetable, 'id' | 'created_at'> & { user_id: string };

export const timetableService = {
  /**
   * Fetches all timetables from the database.
   */
  async getTimetables(): Promise<Timetable[]> {
    const { data, error } = await supabase
      .from(TIMETABLE_TABLE)
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching timetables:', error);
      throw error;
    }

    return data || [];
  },

  /**
   * Adds a new timetable record to the database.
   * @param timetableData The data for the new timetable.
   * @returns The newly created timetable record.
   */
  async addTimetable(timetableData: NewTimetable): Promise<Timetable> {
    const { data, error } = await supabase
      .from(TIMETABLE_TABLE)
      .insert([timetableData])
      .select()
      .single();

    if (error) {
      console.error('Error adding timetable:', error);
      throw error;
    }

    return data;
  },

  /**
   * Deletes a timetable from storage and the database.
   * @param timetableId The ID of the timetable record to delete.
   * @param storagePath The path of the file in Supabase storage.
   */
  async deleteTimetable(timetableId: number, storagePath: string): Promise<void> {
    // First, delete the file from storage.
    await databaseService.deleteFile(storagePath);
    
    // Then, delete the record from the database.
    const { error } = await supabase
      .from(TIMETABLE_TABLE)
      .delete()
      .match({ id: timetableId });

    if (error) {
      console.error('Error deleting timetable record:', error);
      // Even if DB delete fails, the file is gone. We throw to notify the UI.
      throw error;
    }
  },
  
  /**
   * Formats an array of timetable objects into a single string context for the AI.
   * @param timetables Array of timetable objects.
   * @returns A formatted string.
   */
  formatTimetablesAsContext(timetables: Timetable[]): string {
    if (!timetables || timetables.length === 0) {
      return "No timetable information is available.";
    }

    return timetables
      .map(tt => {
        return `--- TIMETABLE: ${tt.file_name} (Department: ${tt.department}, Year: ${tt.year}) ---\n${tt.content}`;
      })
      .join('\n\n');
  }
};
